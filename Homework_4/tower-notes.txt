I used the code from an old implementation of SWI-PROLOG
to create my transpose function.

Speedup does not always work, since the tower/3 predicate finishes so fast
we get a divide by zero error. Therefore, I just added 1 millisecond to each
time to make the math more reliable. My test case was just calling
tower(4, T1, C).
plain_tower(4, T2, C).
After five trials, I saw that plain_tower was slower by an average of 21.6x.

The ambiguous puzzle that I generated can be found through the 
following command. 
| ?- ambiguous(N, C, T1, T2).

C = counts([4,2,2,1],[1,2,2,4],[4,2,2,1],[1,2,2,4])
N = 4
T1 = [[1,2,3,4],[2,1,4,3],[3,4,1,2],[4,3,2,1]]
T2 = [[1,2,3,4],[2,4,1,3],[3,1,4,2],[4,3,2,1]] ? 

(2 ms) yes
